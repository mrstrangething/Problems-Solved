Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:

Input: nums = [3,2,3]
Output: 3

Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
Constraints:

    n == nums.length
    1 <= n <= 5 * 104
    -109 <= nums[i] <= 109

 
Follow-up: Could you solve the problem in linear time and in O(1) space?

Solution----------------------------->

class Solution {
    public int majorityElement(int[] nums) {
        

        //Approach :- Moore's Algorithm
         int n = nums.length;
        int cand = nums[0];
        int cnt = 1;
        
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == cand) {
                cnt++;
            } else {
                cnt--;
            }
            if (cnt == 0) {
                cand = nums[i];
                cnt = 1;
            }
        }
        cnt = 0;
        for (int val : nums) {
            if (val == cand) {
                cnt++;
            }
        }
        if (cnt > n / 2) {
            return cand;
        } else {
            return -1;
        }
    }
}
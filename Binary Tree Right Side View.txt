Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 

Example 1:

Input: root = [1,2,3,null,5,null,4]

Output: [1,3,4]

Explanation:

Example 2:

Input: root = [1,2,3,4,null,null,null,5]

Output: [1,3,4,5]

Explanation:

Example 3:

Input: root = [1,null,3]

Output: [1,3]

Example 4:

Input: root = []

Output: []

 

Constraints:

    The number of nodes in the tree is in the range [0, 100].
    -100 <= Node.val <= 100

Solution------------------------>>>>>>>>>>>>>>>>>>>>>

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList();
        helper(root, result, 0);
        return result;
    }

    public void helper(TreeNode root, List<Integer> result, int depth) {
        if (root == null) {
            return;
        }
        if (result.size() == depth) {
            result.add(root.val);
        }
        helper(root.right, result, depth + 1);
        helper(root.left, result, depth + 1);
    }
}

---------------


class Solution {

    List<Integer> ls = new ArrayList<>();
    Set<Integer> set = new HashSet<>();

    public List<Integer> rightSideView(TreeNode root) {
        helper(root, 0);
        return ls;
    }

    public void helper(TreeNode root, int level) {
        if (root == null) return;

        if (set.add(level)) {
        
            ls.add(root.val);
        }

        helper(root.right, level + 1);
        helper(root.left, level + 1);
        }    
}
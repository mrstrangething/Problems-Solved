Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []

Constraints:

    The number of nodes in the tree is in the range [0, 2000].
    -1000 <= Node.val <= 1000

Solution --------------- >>>>>>>>>> >>>>>>>>>>>> .>>>>>>>>>>>>>>>>>>>


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
      //  List<List<Integer>> result = new ArrayList<>();
    //     Queue<TreeNode> que=new LinkedList<>();
    //     if (root == null) {
    //         return result; 
    //     }
    //     que.add(root);
    //     while(!que.isEmpty()){
    //         int s=que.size();
    //         ArrayList<Integer> sub=new ArrayList<>();
    //         for(int i=0;i<s;i++){
    //             if(que.peek().left!=null){
    //                 que.add(que.peek().left);
    //             }
    //             if(que.peek().right!=null){
    //                 que.add(que.peek().right);
    //             }
    //             sub.add(que.poll().val);
    //         }
    //         result.add(sub);
    //     }
    //  return result;  
      List<List<Integer>> result = new ArrayList<>();
        levelOrderTraversal(root, 0, result);
        return result;
    }

    private void levelOrderTraversal(TreeNode node, int level, List<List<Integer>> result) {
        if (node == null) {
            return;
        }

        if (result.size() == level) {
            result.add(new ArrayList<>());
        }

        result.get(level).add(node.val);
        levelOrderTraversal(node.left, level + 1, result);
        levelOrderTraversal(node.right, level + 1, result);
    }  
    
}